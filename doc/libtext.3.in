.TH "libtext" "3" "17 May 2017"  "libtext 1.0.0" "User commands"

.SH "NAME"
libtext \- text manipulation routines.

.SH "SYNOPSIS"
.nf
#include <libtext/libtext.h>

const char* read(const char* input, const char* sep, std::string* result);
const char* read(const char* input, const char* sep, uint8_t* result);
const char* read(const char* input, const char* sep, uint16_t* result);
const char* read(const char* input, const char* sep, uint32_t* result);
const char* read(const char* input, const char* sep, uint64_t* result);
const char* read(const char* input, const char* sep, int8_t* result);
const char* read(const char* input, const char* sep, int16_t* result);
const char* read(const char* input, const char* sep, int32_t* result);
const char* read(const char* input, const char* sep, int64_t* result);
const char* read(const char* input, const char* sep, float* result);
const char* read(const char* input, const char* sep, double* result);
const char* read(const char* input, const char* sep, long double* result);
const char* read(const char* input, const char* sep, int result);
template <class T, class... A>
const char* read(const char* input, const char* sep, T result, const A&... a);
const char* nextline(const char* input);
std::string oneline(const char* input);
void strip(std::string* input, const char* reject);
char* strip(char* input, const char* reject);

.SH "DESCRIPTION"
read reads a line from input, validates that the line is well formed and splits
the line to a sequence of fields separated by the contents of sep. The
arguments that follow sep are all output arguments.   The first field is
assigned to the output argument that follows sep.  If the variadic overload is
used then the second field is assigned to the next output argument, etc.  read
converts the read field from const char* to the type of the output argument.
The line is well formed when the line is a sequence of fields separated the
contents of sep and the line begins and ends with a field and the value of each
field can be converted to the type of the related output argument and the line
has enough fields to initialize all output arguments.  read ignores trailing
and leading spaces and tabs around fields, if sep consists entirely of spaces
and/or tabs. read always considers space equal tab when matching a char from
sep to a char from input. It is necessary to consider space equal tab to parse
manually edited files separated by spaces or tabs (e.g. /etc/fstab).  If the
line has fewer fields than there are output arguments then read initializes as
many output arguments as there are fields (starting from the leftmost) and
keeps the subsequent output arguments intact.  An output argument can be 0 or
an address of a variable of one of the following types int8_t, int16_t,
int32_t, int64_t, uint8_t, uint16_t, uint32_t, uint64_t, float, double, long
double, std::string.  If an output argument has value 0 then read does not
assign the related field.
E.g.
std::string host;
uint16_t port;
libtext::read("example.com:80", ":", &host, &port);
assert(host == "example.com");
assert(port == 80);
libtext::read("example.com:80", ":", 0, &port);
assert(port == 80);
Passing any integer other than 0 as value of an output argument causes
undefined behavior.

nextline finds the address of the character immediately following the first
newline character in the input.

oneline builds a copy of a substring of the input from the beginning until the
first newline character.

strip removes leading and trailing segments of input which consist entirely of
characters in reject.

.SH "RETURN VALUE"
If a well formed line has more fields than there are output arguments then read
returns the address of the field immediately following the rightmost read
field. If a well formed line has the same number of fields as there are output
arguments then read returns the address of the character that terminates the
line (a new line character or a null terminator).  If the line is malformed
read returns 0.

nextline returns the address of the character immediately following the first
newline character in the input. If there is no newline character in the input
then nextline returns the address of the null terminator.

oneline returns a copy of a substring of the input from the beginning until the
first newline character. If there is no newline character in input the one line
return a copy of input.

strip returns the address of the first such character of input that is not in
reject.

.SH "EXAMPLE"
This program shows how to use libtext::read to populate an in memory data
structure holding a copy of /etc/fstab contents.
.nf

@example@
.fi
.SH "AUTHORS"
Dmitry Goncharov <dgoncharov@users.sf.net>

.SH "COPYRIGHT"
Copyright (C) 2017 Dmitry Goncharov.
.br
Distributed under the BSD license.

.SH "HOMEPAGE"
https://github.com/dgoncharov/libtext

.SH "SEE ALSO"
.BR read (1)
